// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SongsAndVotes.Server;

namespace SongsAndVotes.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210207135641_Change1")]
    partial class Change1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.Album", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ArtistByID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserByID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ArtistByID");

                    b.HasIndex("UserByID");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.Artist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.ArtistsSongs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ArtistID")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SongsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ArtistID");

                    b.HasIndex("SongsID");

                    b.ToTable("ArtistsSongs");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.Song", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AlbumID")
                        .HasColumnType("int");

                    b.Property<int?>("ArtistID")
                        .HasColumnType("int");

                    b.Property<string>("AudioFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserUploadedID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AlbumID");

                    b.HasIndex("ArtistID");

                    b.HasIndex("UserUploadedID");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.Album", b =>
                {
                    b.HasOne("SongsAndVotes.Shared.Entities.Artist", "ArtistBy")
                        .WithMany()
                        .HasForeignKey("ArtistByID");

                    b.HasOne("SongsAndVotes.Shared.Entities.User", "UserBy")
                        .WithMany()
                        .HasForeignKey("UserByID");

                    b.Navigation("ArtistBy");

                    b.Navigation("UserBy");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.ArtistsSongs", b =>
                {
                    b.HasOne("SongsAndVotes.Shared.Entities.Artist", "Artist")
                        .WithMany("ArtistsSongs")
                        .HasForeignKey("ArtistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SongsAndVotes.Shared.Entities.Song", "Songs")
                        .WithMany("ArtistsSongs")
                        .HasForeignKey("SongsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.Song", b =>
                {
                    b.HasOne("SongsAndVotes.Shared.Entities.Album", null)
                        .WithMany("Songs")
                        .HasForeignKey("AlbumID");

                    b.HasOne("SongsAndVotes.Shared.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistID");

                    b.HasOne("SongsAndVotes.Shared.Entities.User", "UserUploaded")
                        .WithMany()
                        .HasForeignKey("UserUploadedID");

                    b.Navigation("Artist");

                    b.Navigation("UserUploaded");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.Artist", b =>
                {
                    b.Navigation("ArtistsSongs");
                });

            modelBuilder.Entity("SongsAndVotes.Shared.Entities.Song", b =>
                {
                    b.Navigation("ArtistsSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
