@inject IArtistRepository artistRepository

<EditForm Model="Song" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Title:</label>
        <div>
            <InputText class="form-control input-text-form" @bind-Value="@Song.Title" />
            <ValidationMessage For="@(()=> Song.Title)" />
        </div>
    </div>

    <div class="form-group">
        <InputIMG Label="Picture:" OnSelectedImage="PhotoSelected" ImageURL="@imageURL" />
    </div>

    <div class="form-group">
        <InputAudioFile Label="Audio:" OnSelectedAudioFile="AudioFileSelected" AudioURL="@audioURL"/>
    </div>

    <div class="form-group">
        <label>Artists:</label>
        <div>
            <MultipleSelectorTypeahead Context="artist" SearchMethod="SearchMethod" SelectedElements="SelectedArtists" OnlyOneSelect="true">
                <MyResultTemplate>
                    <img style="width: 50px; height: 50px;" src="@artist.Photo" />
                    @artist.Name
                </MyResultTemplate>
                <MyListTemplate>
                    <img style="width: 50px; height: 50px;" src="@artist.Photo" />  @artist.Name
                </MyListTemplate>
            </MultipleSelectorTypeahead>
        </div>
    </div>

    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Primary" Size="Size.Large" >Save changes</MudButton>
</EditForm>



@code {
    [Parameter] public Song Song { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Artist> SelectedArtists { get; set; } = new List<Artist>();
    [Parameter] public List<Artist> NotSelectedArtists { get; set; } = new List<Artist>();

    private string imageURL;
    private string audioURL;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Song.Photo))
        {
            imageURL = Song.Photo;
            Song.Photo = null;
        }
    }

    private async Task OnDataAnnotationsValidated()
    {
        Song.Artist = SelectedArtists[0];

        await OnValidSubmit.InvokeAsync(null);
    }

    private void PhotoSelected(string imageBase64)
    {
        Song.Photo = imageBase64;
        imageURL = null;
    }

    private void AudioFileSelected(string audioBase64)
    {
        Song.AudioFile = audioBase64;
        audioURL = null;
    }

    private async Task<IEnumerable<Artist>> SearchMethod(string searchText)
    {
        List<Artist> artists = new List<Artist>();
        artists = await artistRepository.GetArtistsByName(searchText);
        return artists;
    }

}
