@inject IAccountRepository accountRepository
@inject ILoginService loginService
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations



<MudDialog>
    <DialogContent>
        <MudText Align="Align.Center" Typo="Typo.h5" Style="margin-top: 10px; margin-bottom: 15px">Login</MudText>
        <MudForm @bind-IsValid="@success">

            <div class="login-dialog-container">

                <div class="login-dialog-textfield">
                    <MudTextField Label="Email" @bind-Value="userInfo.Email" Variant="Variant.Outlined" FullWidth="true" Required="true" RequiredError="Email is required."
                                  Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })" />
                </div>

                <div class="login-dialog-textfield">
                    <MudTextField Label="Password" @bind-Value="userInfo.Password" Variant="Variant.Outlined" FullWidth="true" Required="true" RequiredError="Password is required."
                                  InputType="@passwordInput" Adornment="Adornment.End" AdornmentIcon="@passwordInputIcon" OnAdornmentClick="ShowPassword" />
                </div>

            </div>
        </MudForm>
    </DialogContent>
    <DialogActions>

        <div class="login-dialog-button">
            <MudButton OnClick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
        </div>
        <div class="login-dialog-button">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!success)" @onclick="(() => Login())">Login</MudButton>
        </div>

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private UserInfo userInfo = new UserInfo();

    private bool isPasswordShown = false;
    private bool success = false;

    private InputType passwordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void Cancel() => MudDialog.Cancel();

    private async Task Login()
    {
        var userToken = await accountRepository.Login(userInfo);
        await loginService.Login(userToken.Token);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void ShowPassword()
    {
        @if (isPasswordShown)
        {
            isPasswordShown = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInput = InputType.Password;
        }
        else
        {
            isPasswordShown = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInput = InputType.Text;
        }
    }
}